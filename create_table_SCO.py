'''
CREATED BY: HAMZA PATWA

This script creates a table of the dipole positions and dipole orientations of each Tryptophan (Trp) molecule
 in the microtubule structure generated (all the PDB files generated by create_spiral.py). The dipole
 positions are given by the midpoint of the positions of the CE2 and CD2 atoms in each Trp molecule. The 
 dipole orientations are given by the following. Consider the plane that contains the CE2 atom, the CD2 atom,
 and the CD1 atom of Trp. Let this be a plane P. Now, let the dipole position (the midpoint between the CE2 and 
 CD2 atoms) be defined as the point M (for midpoint). The line that passes through M and the CD1 atom is the 
 x-axis. The positive direction is pointing from M towards the CD1 atom. Now, consider the unit vector V that 
 lies on the x-axis pointing towards the CD1 atom. Rotate this vector in the plane P 46.2 degrees above the x-axis.
 This rotated unit vector is the dipole orientation of the Trp molecule. The x, y, and z components of this unit
 vector are listed in the table along with the x, y, and z coordinates of point M.

USAGE: $ python create_table.py	filename

filename is the desired name of the file that will be created with the positions and dipole orientations.

'''

import numpy as np
from scipy.spatial.transform import Rotation as R
import math
import os
import sys

# Returns the midpoint between two points
def midpoint(point1, point2):
	return (point1 + point2)/2


# Returns the angle between two vectors
def angle_degrees(vec1, vec2):
	return np.arccos((vec1@vec2)/(math.sqrt(vec1@vec1) * math.sqrt(vec2@vec2))) * (180/math.pi)

# Returns a normalized version of the input vector
def normalize_vec(vec):
	return vec / math.sqrt(vec@vec)


# Same as the read_pdb() function in the create_spiral.py file, just without the first element of the tuple.
def read_pdb(filename):
	
	# Create an array that contains each line of the PDB file as an entry
	# Also filter that array to just the atoms
	
	with open(filename, "r") as jff:
		jffArr = jff.readlines()
	
	jffAtoms = [line for line in jffArr if line[0:4] == "ATOM"]
	return jffAtoms


# Returns an array of the dipole orientations for one PDB file.
def get_dipole_vectors(jffAtoms):
	
	print(len(jffAtoms))	
	# ORDER IN PDB FILE: CD1, CD2, CE2, NE1
	# Array containing positions of the CE2, CD2, CD1, and NE1 atoms
	atoms = np.array([[float(line[30:38]), float(line[38:46]), float(line[46:54])] for line in jffAtoms if (line.split()[3] == "TRP" and line.split()[2] in ["CE2", "CD2", "NE1", "CD1"])])
	
	# Vectors from M to Nitrogen NE1
	v1s = []
	
	# Vectors from M to Carbon CE2 (CE2 is the top atom in the midpoint)
	v2s = []
	
	# Vectors from M to Carbon CD1 (the vector that lies on the "x-axis").
	vs_to_rot = []
	
	a = 46.2
	
	# Looping through atoms to calculate all relevant vectors	
	for j in range(int(len(atoms)/4)):
		v1s.append( normalize_vec(atoms[(4*j)+3] - midpoint(atoms[(4*j)+1], atoms[(4*j)+2])) )
		v2s.append( normalize_vec(atoms[(4*j)+2] - midpoint(atoms[(4*j)+1], atoms[(4*j)+2])) )
		vs_to_rot.append( normalize_vec(atoms[(4*j)] - midpoint(atoms[(4*j)+1], atoms[(4*j)+2])) )
	
	# Looping through vectors to calculate dipoles
	index = 0
	dipole_vectors = np.zeros((len(v1s),3))
	
	for v1, v2, v_to_rot in zip(v1s, v2s, vs_to_rot):
		
		# The axis of rotation
		axis_of_rot = np.cross(v_to_rot, v1)
		axis_of_rot_scaled = np.sin((a/2) * (np.pi/180)) * normalize_vec(axis_of_rot)
	
		# A rotation of "a" degrees about the axis of rotation defined above, defined in terms of quaternions
		rot_for_dipole = R.from_quat([axis_of_rot_scaled[0], axis_of_rot_scaled[1], axis_of_rot_scaled[2], np.cos((a/2) * (np.pi/180))])
		
		# Add rotated normalized unit vector to the array
		dipole_vectors[index] = rot_for_dipole.apply(v_to_rot)
		index = index + 1
	
	return dipole_vectors	


def main():
	
	if len(sys.argv) == 1:
		print("Please enter the desired name of the file with dipole positions and orientations as a command-line argument.")
		sys.exit(0)

	with open(sys.argv[1], 'x') as f:
	#	for fname in os.scandir():
	#	if fname.is_file() and fname.name[:8] == "1jff_num":
		
		atoms = read_pdb("PDB_files/AF-Q9TTS5-F1-model_v4.pdb")
		dipoles = get_dipole_vectors(atoms)

		# Just extract the CD2 and CE2 atoms for the midpoint, to get the dipole positions
		atoms = np.array([[float(line[30:38]), float(line[38:46]), float(line[46:54])] for line in atoms if (line.split()[3]=="TRP" and line.split()[2] in ["CE2", "CD2"])])
	
		# Array of positions of the midpoints
		atoms_mp_pos = []

		for j in range(int(len(atoms)/2)):
			atoms_mp_pos.append(midpoint(atoms[2*j], atoms[(2*j)+1]))
		
		# Create strings and write to file
		atoms_strings = [f"{pos[0]:.3f} {pos[1]:.3f} {pos[2]:.3f} {vec[0]:.3f} {vec[1]:.3f} {vec[2]:.3f}\n" for pos, vec in zip(atoms_mp_pos, dipoles)]
		f.writelines(atoms_strings)
	

if __name__ == "__main__":
	main()


